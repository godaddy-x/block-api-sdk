// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: contract.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractServiceClient is the client API for ContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractServiceClient interface {
	GetContracts(ctx context.Context, in *GetContractsReq, opts ...grpc.CallOption) (*GetContractsRes, error)
	CreateSmartContractTrade(ctx context.Context, in *CreateSmartContractTradeReq, opts ...grpc.CallOption) (*CreateSmartContractTradeRes, error)
	SubmitSmartContractTrade(ctx context.Context, in *SubmitSmartContractTradeReq, opts ...grpc.CallOption) (*SubmitSmartContractTradeRes, error)
	CallSmartContractABI(ctx context.Context, in *CallSmartContractABIReq, opts ...grpc.CallOption) (*CallSmartContractABIRes, error)
	FindSmartContractReceipt(ctx context.Context, in *FindSmartContractReceiptReq, opts ...grpc.CallOption) (*FindSmartContractReceiptRes, error)
	FollowSmartContractReceipt(ctx context.Context, in *FollowSmartContractReceiptReq, opts ...grpc.CallOption) (*FollowSmartContractReceiptRes, error)
}

type contractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractServiceClient(cc grpc.ClientConnInterface) ContractServiceClient {
	return &contractServiceClient{cc}
}

func (c *contractServiceClient) GetContracts(ctx context.Context, in *GetContractsReq, opts ...grpc.CallOption) (*GetContractsRes, error) {
	out := new(GetContractsRes)
	err := c.cc.Invoke(ctx, "/service.ContractService/GetContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) CreateSmartContractTrade(ctx context.Context, in *CreateSmartContractTradeReq, opts ...grpc.CallOption) (*CreateSmartContractTradeRes, error) {
	out := new(CreateSmartContractTradeRes)
	err := c.cc.Invoke(ctx, "/service.ContractService/CreateSmartContractTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) SubmitSmartContractTrade(ctx context.Context, in *SubmitSmartContractTradeReq, opts ...grpc.CallOption) (*SubmitSmartContractTradeRes, error) {
	out := new(SubmitSmartContractTradeRes)
	err := c.cc.Invoke(ctx, "/service.ContractService/SubmitSmartContractTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) CallSmartContractABI(ctx context.Context, in *CallSmartContractABIReq, opts ...grpc.CallOption) (*CallSmartContractABIRes, error) {
	out := new(CallSmartContractABIRes)
	err := c.cc.Invoke(ctx, "/service.ContractService/CallSmartContractABI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) FindSmartContractReceipt(ctx context.Context, in *FindSmartContractReceiptReq, opts ...grpc.CallOption) (*FindSmartContractReceiptRes, error) {
	out := new(FindSmartContractReceiptRes)
	err := c.cc.Invoke(ctx, "/service.ContractService/FindSmartContractReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) FollowSmartContractReceipt(ctx context.Context, in *FollowSmartContractReceiptReq, opts ...grpc.CallOption) (*FollowSmartContractReceiptRes, error) {
	out := new(FollowSmartContractReceiptRes)
	err := c.cc.Invoke(ctx, "/service.ContractService/FollowSmartContractReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServiceServer is the server API for ContractService service.
// All implementations must embed UnimplementedContractServiceServer
// for forward compatibility
type ContractServiceServer interface {
	GetContracts(context.Context, *GetContractsReq) (*GetContractsRes, error)
	CreateSmartContractTrade(context.Context, *CreateSmartContractTradeReq) (*CreateSmartContractTradeRes, error)
	SubmitSmartContractTrade(context.Context, *SubmitSmartContractTradeReq) (*SubmitSmartContractTradeRes, error)
	CallSmartContractABI(context.Context, *CallSmartContractABIReq) (*CallSmartContractABIRes, error)
	FindSmartContractReceipt(context.Context, *FindSmartContractReceiptReq) (*FindSmartContractReceiptRes, error)
	FollowSmartContractReceipt(context.Context, *FollowSmartContractReceiptReq) (*FollowSmartContractReceiptRes, error)
	mustEmbedUnimplementedContractServiceServer()
}

// UnimplementedContractServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContractServiceServer struct {
}

func (UnimplementedContractServiceServer) GetContracts(context.Context, *GetContractsReq) (*GetContractsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContracts not implemented")
}
func (UnimplementedContractServiceServer) CreateSmartContractTrade(context.Context, *CreateSmartContractTradeReq) (*CreateSmartContractTradeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmartContractTrade not implemented")
}
func (UnimplementedContractServiceServer) SubmitSmartContractTrade(context.Context, *SubmitSmartContractTradeReq) (*SubmitSmartContractTradeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSmartContractTrade not implemented")
}
func (UnimplementedContractServiceServer) CallSmartContractABI(context.Context, *CallSmartContractABIReq) (*CallSmartContractABIRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallSmartContractABI not implemented")
}
func (UnimplementedContractServiceServer) FindSmartContractReceipt(context.Context, *FindSmartContractReceiptReq) (*FindSmartContractReceiptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSmartContractReceipt not implemented")
}
func (UnimplementedContractServiceServer) FollowSmartContractReceipt(context.Context, *FollowSmartContractReceiptReq) (*FollowSmartContractReceiptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowSmartContractReceipt not implemented")
}
func (UnimplementedContractServiceServer) mustEmbedUnimplementedContractServiceServer() {}

// UnsafeContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractServiceServer will
// result in compilation errors.
type UnsafeContractServiceServer interface {
	mustEmbedUnimplementedContractServiceServer()
}

func RegisterContractServiceServer(s grpc.ServiceRegistrar, srv ContractServiceServer) {
	s.RegisterService(&ContractService_ServiceDesc, srv)
}

func _ContractService_GetContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).GetContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ContractService/GetContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).GetContracts(ctx, req.(*GetContractsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_CreateSmartContractTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmartContractTradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).CreateSmartContractTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ContractService/CreateSmartContractTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).CreateSmartContractTrade(ctx, req.(*CreateSmartContractTradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_SubmitSmartContractTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSmartContractTradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).SubmitSmartContractTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ContractService/SubmitSmartContractTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).SubmitSmartContractTrade(ctx, req.(*SubmitSmartContractTradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_CallSmartContractABI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSmartContractABIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).CallSmartContractABI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ContractService/CallSmartContractABI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).CallSmartContractABI(ctx, req.(*CallSmartContractABIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_FindSmartContractReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSmartContractReceiptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).FindSmartContractReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ContractService/FindSmartContractReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).FindSmartContractReceipt(ctx, req.(*FindSmartContractReceiptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_FollowSmartContractReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowSmartContractReceiptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).FollowSmartContractReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ContractService/FollowSmartContractReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).FollowSmartContractReceipt(ctx, req.(*FollowSmartContractReceiptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractService_ServiceDesc is the grpc.ServiceDesc for ContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ContractService",
	HandlerType: (*ContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContracts",
			Handler:    _ContractService_GetContracts_Handler,
		},
		{
			MethodName: "CreateSmartContractTrade",
			Handler:    _ContractService_CreateSmartContractTrade_Handler,
		},
		{
			MethodName: "SubmitSmartContractTrade",
			Handler:    _ContractService_SubmitSmartContractTrade_Handler,
		},
		{
			MethodName: "CallSmartContractABI",
			Handler:    _ContractService_CallSmartContractABI_Handler,
		},
		{
			MethodName: "FindSmartContractReceipt",
			Handler:    _ContractService_FindSmartContractReceipt_Handler,
		},
		{
			MethodName: "FollowSmartContractReceipt",
			Handler:    _ContractService_FollowSmartContractReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}
