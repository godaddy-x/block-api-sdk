// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: subscribe.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscribeServiceClient is the client API for SubscribeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscribeServiceClient interface {
	// 创建订阅
	CreateSubscribe(ctx context.Context, in *CreateSubscribeReq, opts ...grpc.CallOption) (*CreateSubscribeRes, error)
	// 获取节点配置
	GetNodeInfo(ctx context.Context, in *GetNodeInfoReq, opts ...grpc.CallOption) (*GetNodeInfoRes, error)
}

type subscribeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribeServiceClient(cc grpc.ClientConnInterface) SubscribeServiceClient {
	return &subscribeServiceClient{cc}
}

func (c *subscribeServiceClient) CreateSubscribe(ctx context.Context, in *CreateSubscribeReq, opts ...grpc.CallOption) (*CreateSubscribeRes, error) {
	out := new(CreateSubscribeRes)
	err := c.cc.Invoke(ctx, "/service.SubscribeService/CreateSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeServiceClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoReq, opts ...grpc.CallOption) (*GetNodeInfoRes, error) {
	out := new(GetNodeInfoRes)
	err := c.cc.Invoke(ctx, "/service.SubscribeService/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeServiceServer is the server API for SubscribeService service.
// All implementations must embed UnimplementedSubscribeServiceServer
// for forward compatibility
type SubscribeServiceServer interface {
	// 创建订阅
	CreateSubscribe(context.Context, *CreateSubscribeReq) (*CreateSubscribeRes, error)
	// 获取节点配置
	GetNodeInfo(context.Context, *GetNodeInfoReq) (*GetNodeInfoRes, error)
	mustEmbedUnimplementedSubscribeServiceServer()
}

// UnimplementedSubscribeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscribeServiceServer struct {
}

func (UnimplementedSubscribeServiceServer) CreateSubscribe(context.Context, *CreateSubscribeReq) (*CreateSubscribeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscribe not implemented")
}
func (UnimplementedSubscribeServiceServer) GetNodeInfo(context.Context, *GetNodeInfoReq) (*GetNodeInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedSubscribeServiceServer) mustEmbedUnimplementedSubscribeServiceServer() {}

// UnsafeSubscribeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscribeServiceServer will
// result in compilation errors.
type UnsafeSubscribeServiceServer interface {
	mustEmbedUnimplementedSubscribeServiceServer()
}

func RegisterSubscribeServiceServer(s grpc.ServiceRegistrar, srv SubscribeServiceServer) {
	s.RegisterService(&SubscribeService_ServiceDesc, srv)
}

func _SubscribeService_CreateSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).CreateSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SubscribeService/CreateSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).CreateSubscribe(ctx, req.(*CreateSubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SubscribeService/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).GetNodeInfo(ctx, req.(*GetNodeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscribeService_ServiceDesc is the grpc.ServiceDesc for SubscribeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscribeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.SubscribeService",
	HandlerType: (*SubscribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscribe",
			Handler:    _SubscribeService_CreateSubscribe_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _SubscribeService_GetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscribe.proto",
}
