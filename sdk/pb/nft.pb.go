// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: nft.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NFTResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Token    string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Name     string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Ctime    int64  `protobuf:"varint,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	TokenID  string `protobuf:"bytes,8,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Uri      string `protobuf:"bytes,9,opt,name=uri,proto3" json:"uri,omitempty"`
	Balance  string `protobuf:"bytes,10,opt,name=balance,proto3" json:"balance,omitempty"`
	Owner    string `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *NFTResult) Reset() {
	*x = NFTResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTResult) ProtoMessage() {}

func (x *NFTResult) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTResult.ProtoReflect.Descriptor instead.
func (*NFTResult) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{0}
}

func (x *NFTResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFTResult) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NFTResult) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFTResult) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NFTResult) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NFTResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTResult) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *NFTResult) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *NFTResult) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *NFTResult) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *NFTResult) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type NFTTransferResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol      string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Token       string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Protocol    string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Name        string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	TokenID     string `protobuf:"bytes,7,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Uri         string `protobuf:"bytes,8,opt,name=uri,proto3" json:"uri,omitempty"`
	From        string `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`
	To          string `protobuf:"bytes,10,opt,name=to,proto3" json:"to,omitempty"`
	Operator    string `protobuf:"bytes,11,opt,name=operator,proto3" json:"operator,omitempty"`
	Amount      string `protobuf:"bytes,12,opt,name=amount,proto3" json:"amount,omitempty"`
	Fees        string `protobuf:"bytes,13,opt,name=fees,proto3" json:"fees,omitempty"`
	BlockHash   string `protobuf:"bytes,14,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockHeight uint64 `protobuf:"varint,15,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	TxID        string `protobuf:"bytes,16,opt,name=txID,proto3" json:"txID,omitempty"`
	Status      string `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	Ctime       int64  `protobuf:"varint,18,opt,name=ctime,proto3" json:"ctime,omitempty"`
}

func (x *NFTTransferResult) Reset() {
	*x = NFTTransferResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTransferResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTransferResult) ProtoMessage() {}

func (x *NFTTransferResult) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTransferResult.ProtoReflect.Descriptor instead.
func (*NFTTransferResult) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{1}
}

func (x *NFTTransferResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFTTransferResult) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NFTTransferResult) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFTTransferResult) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NFTTransferResult) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NFTTransferResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTTransferResult) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *NFTTransferResult) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *NFTTransferResult) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *NFTTransferResult) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *NFTTransferResult) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *NFTTransferResult) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *NFTTransferResult) GetFees() string {
	if x != nil {
		return x.Fees
	}
	return ""
}

func (x *NFTTransferResult) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *NFTTransferResult) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *NFTTransferResult) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *NFTTransferResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NFTTransferResult) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

type GetNFTCollectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Offset int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	LastID int64  `protobuf:"varint,5,opt,name=lastID,proto3" json:"lastID,omitempty"`
	PrevID int64  `protobuf:"varint,6,opt,name=prevID,proto3" json:"prevID,omitempty"`
}

func (x *GetNFTCollectionReq) Reset() {
	*x = GetNFTCollectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTCollectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTCollectionReq) ProtoMessage() {}

func (x *GetNFTCollectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTCollectionReq.ProtoReflect.Descriptor instead.
func (*GetNFTCollectionReq) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{2}
}

func (x *GetNFTCollectionReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetNFTCollectionReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetNFTCollectionReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNFTCollectionReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNFTCollectionReq) GetLastID() int64 {
	if x != nil {
		return x.LastID
	}
	return 0
}

func (x *GetNFTCollectionReq) GetPrevID() int64 {
	if x != nil {
		return x.PrevID
	}
	return 0
}

type GetNFTCollectionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*NFTResult `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *GetNFTCollectionRes) Reset() {
	*x = GetNFTCollectionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTCollectionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTCollectionRes) ProtoMessage() {}

func (x *GetNFTCollectionRes) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTCollectionRes.ProtoReflect.Descriptor instead.
func (*GetNFTCollectionRes) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{3}
}

func (x *GetNFTCollectionRes) GetResult() []*NFTResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetNFTTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Offset  int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	LastID  int64  `protobuf:"varint,5,opt,name=lastID,proto3" json:"lastID,omitempty"`
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"` // NFT合约地址
	TokenID string `protobuf:"bytes,7,opt,name=tokenID,proto3" json:"tokenID,omitempty"` // NFT tokenID
	PrevID  int64  `protobuf:"varint,8,opt,name=prevID,proto3" json:"prevID,omitempty"`
}

func (x *GetNFTTokenReq) Reset() {
	*x = GetNFTTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTTokenReq) ProtoMessage() {}

func (x *GetNFTTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTTokenReq.ProtoReflect.Descriptor instead.
func (*GetNFTTokenReq) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{4}
}

func (x *GetNFTTokenReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetNFTTokenReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetNFTTokenReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNFTTokenReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNFTTokenReq) GetLastID() int64 {
	if x != nil {
		return x.LastID
	}
	return 0
}

func (x *GetNFTTokenReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetNFTTokenReq) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *GetNFTTokenReq) GetPrevID() int64 {
	if x != nil {
		return x.PrevID
	}
	return 0
}

type GetNFTTokenRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*NFTResult `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *GetNFTTokenRes) Reset() {
	*x = GetNFTTokenRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTTokenRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTTokenRes) ProtoMessage() {}

func (x *GetNFTTokenRes) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTTokenRes.ProtoReflect.Descriptor instead.
func (*GetNFTTokenRes) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{5}
}

func (x *GetNFTTokenRes) GetResult() []*NFTResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetNFTOwnerTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Offset  int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	LastID  int64  `protobuf:"varint,5,opt,name=lastID,proto3" json:"lastID,omitempty"`
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"` // NFT合约地址
	TokenID string `protobuf:"bytes,7,opt,name=tokenID,proto3" json:"tokenID,omitempty"` // NFT tokenID
	Owner   string `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`     // 拥有者地址
	PrevID  int64  `protobuf:"varint,9,opt,name=prevID,proto3" json:"prevID,omitempty"`
}

func (x *GetNFTOwnerTokenReq) Reset() {
	*x = GetNFTOwnerTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTOwnerTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTOwnerTokenReq) ProtoMessage() {}

func (x *GetNFTOwnerTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTOwnerTokenReq.ProtoReflect.Descriptor instead.
func (*GetNFTOwnerTokenReq) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{6}
}

func (x *GetNFTOwnerTokenReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetNFTOwnerTokenReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetNFTOwnerTokenReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNFTOwnerTokenReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNFTOwnerTokenReq) GetLastID() int64 {
	if x != nil {
		return x.LastID
	}
	return 0
}

func (x *GetNFTOwnerTokenReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetNFTOwnerTokenReq) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *GetNFTOwnerTokenReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetNFTOwnerTokenReq) GetPrevID() int64 {
	if x != nil {
		return x.PrevID
	}
	return 0
}

type GetNFTOwnerTokenRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*NFTResult `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *GetNFTOwnerTokenRes) Reset() {
	*x = GetNFTOwnerTokenRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTOwnerTokenRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTOwnerTokenRes) ProtoMessage() {}

func (x *GetNFTOwnerTokenRes) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTOwnerTokenRes.ProtoReflect.Descriptor instead.
func (*GetNFTOwnerTokenRes) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{7}
}

func (x *GetNFTOwnerTokenRes) GetResult() []*NFTResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetNFTTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Offset  int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	LastID  int64  `protobuf:"varint,5,opt,name=lastID,proto3" json:"lastID,omitempty"`
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"` // NFT合约地址
	TokenID string `protobuf:"bytes,7,opt,name=tokenID,proto3" json:"tokenID,omitempty"` // NFT tokenID
	From    string `protobuf:"bytes,8,opt,name=from,proto3" json:"from,omitempty"`       // 转出地址
	To      string `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`           // 转入地址
	TxID    string `protobuf:"bytes,10,opt,name=txID,proto3" json:"txID,omitempty"`
	PrevID  int64  `protobuf:"varint,11,opt,name=prevID,proto3" json:"prevID,omitempty"`
}

func (x *GetNFTTransferReq) Reset() {
	*x = GetNFTTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTTransferReq) ProtoMessage() {}

func (x *GetNFTTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTTransferReq.ProtoReflect.Descriptor instead.
func (*GetNFTTransferReq) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{8}
}

func (x *GetNFTTransferReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetNFTTransferReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetNFTTransferReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNFTTransferReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNFTTransferReq) GetLastID() int64 {
	if x != nil {
		return x.LastID
	}
	return 0
}

func (x *GetNFTTransferReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetNFTTransferReq) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *GetNFTTransferReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetNFTTransferReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetNFTTransferReq) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *GetNFTTransferReq) GetPrevID() int64 {
	if x != nil {
		return x.PrevID
	}
	return 0
}

type GetNFTTransferRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*NFTTransferResult `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *GetNFTTransferRes) Reset() {
	*x = GetNFTTransferRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTTransferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTTransferRes) ProtoMessage() {}

func (x *GetNFTTransferRes) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTTransferRes.ProtoReflect.Descriptor instead.
func (*GetNFTTransferRes) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{9}
}

func (x *GetNFTTransferRes) GetResult() []*NFTTransferResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetTokenURIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID    string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // NFT合约地址
	TokenID  string `protobuf:"bytes,4,opt,name=tokenID,proto3" json:"tokenID,omitempty"` // NFT tokenID
	Token    string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	Protocol string `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Name     string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTokenURIReq) Reset() {
	*x = GetTokenURIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenURIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenURIReq) ProtoMessage() {}

func (x *GetTokenURIReq) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenURIReq.ProtoReflect.Descriptor instead.
func (*GetTokenURIReq) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{10}
}

func (x *GetTokenURIReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetTokenURIReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetTokenURIReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetTokenURIReq) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *GetTokenURIReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetTokenURIReq) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *GetTokenURIReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTokenURIRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URI string `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
}

func (x *GetTokenURIRes) Reset() {
	*x = GetTokenURIRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenURIRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenURIRes) ProtoMessage() {}

func (x *GetTokenURIRes) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenURIRes.ProtoReflect.Descriptor instead.
func (*GetTokenURIRes) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{11}
}

func (x *GetTokenURIRes) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

type GetTokenAmountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // NFT合约地址
	TokenID string `protobuf:"bytes,4,opt,name=tokenID,proto3" json:"tokenID,omitempty"` // NFT tokenID
}

func (x *GetTokenAmountReq) Reset() {
	*x = GetTokenAmountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenAmountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenAmountReq) ProtoMessage() {}

func (x *GetTokenAmountReq) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenAmountReq.ProtoReflect.Descriptor instead.
func (*GetTokenAmountReq) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{12}
}

func (x *GetTokenAmountReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetTokenAmountReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetTokenAmountReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetTokenAmountReq) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

type GetTokenAmountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *GetTokenAmountRes) Reset() {
	*x = GetTokenAmountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenAmountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenAmountRes) ProtoMessage() {}

func (x *GetTokenAmountRes) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenAmountRes.ProtoReflect.Descriptor instead.
func (*GetTokenAmountRes) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{13}
}

func (x *GetTokenAmountRes) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetTokenAmountRes) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

var File_nft_proto protoreflect.FileDescriptor

var file_nft_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x09, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xb5, 0x03, 0x0a,
	0x11, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e,
	0x46, 0x54, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x22, 0x3c,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xeb, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x02,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x52, 0x49, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x52, 0x49, 0x52, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x49, 0x22, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x32, 0xce, 0x03, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x46,
	0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x52, 0x49, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x52, 0x49, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x52, 0x49, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_proto_rawDescOnce sync.Once
	file_nft_proto_rawDescData = file_nft_proto_rawDesc
)

func file_nft_proto_rawDescGZIP() []byte {
	file_nft_proto_rawDescOnce.Do(func() {
		file_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_proto_rawDescData)
	})
	return file_nft_proto_rawDescData
}

var file_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_nft_proto_goTypes = []interface{}{
	(*NFTResult)(nil),           // 0: service.NFTResult
	(*NFTTransferResult)(nil),   // 1: service.NFTTransferResult
	(*GetNFTCollectionReq)(nil), // 2: service.GetNFTCollectionReq
	(*GetNFTCollectionRes)(nil), // 3: service.GetNFTCollectionRes
	(*GetNFTTokenReq)(nil),      // 4: service.GetNFTTokenReq
	(*GetNFTTokenRes)(nil),      // 5: service.GetNFTTokenRes
	(*GetNFTOwnerTokenReq)(nil), // 6: service.GetNFTOwnerTokenReq
	(*GetNFTOwnerTokenRes)(nil), // 7: service.GetNFTOwnerTokenRes
	(*GetNFTTransferReq)(nil),   // 8: service.GetNFTTransferReq
	(*GetNFTTransferRes)(nil),   // 9: service.GetNFTTransferRes
	(*GetTokenURIReq)(nil),      // 10: service.GetTokenURIReq
	(*GetTokenURIRes)(nil),      // 11: service.GetTokenURIRes
	(*GetTokenAmountReq)(nil),   // 12: service.GetTokenAmountReq
	(*GetTokenAmountRes)(nil),   // 13: service.GetTokenAmountRes
}
var file_nft_proto_depIdxs = []int32{
	0,  // 0: service.GetNFTCollectionRes.Result:type_name -> service.NFTResult
	0,  // 1: service.GetNFTTokenRes.Result:type_name -> service.NFTResult
	0,  // 2: service.GetNFTOwnerTokenRes.Result:type_name -> service.NFTResult
	1,  // 3: service.GetNFTTransferRes.Result:type_name -> service.NFTTransferResult
	2,  // 4: service.NFTService.GetNFTCollection:input_type -> service.GetNFTCollectionReq
	4,  // 5: service.NFTService.GetNFTToken:input_type -> service.GetNFTTokenReq
	6,  // 6: service.NFTService.GetNFTOwnerToken:input_type -> service.GetNFTOwnerTokenReq
	8,  // 7: service.NFTService.GetNFTTransfer:input_type -> service.GetNFTTransferReq
	10, // 8: service.NFTService.GetTokenURI:input_type -> service.GetTokenURIReq
	12, // 9: service.NFTService.GetTokenAmount:input_type -> service.GetTokenAmountReq
	3,  // 10: service.NFTService.GetNFTCollection:output_type -> service.GetNFTCollectionRes
	5,  // 11: service.NFTService.GetNFTToken:output_type -> service.GetNFTTokenRes
	7,  // 12: service.NFTService.GetNFTOwnerToken:output_type -> service.GetNFTOwnerTokenRes
	9,  // 13: service.NFTService.GetNFTTransfer:output_type -> service.GetNFTTransferRes
	11, // 14: service.NFTService.GetTokenURI:output_type -> service.GetTokenURIRes
	13, // 15: service.NFTService.GetTokenAmount:output_type -> service.GetTokenAmountRes
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_nft_proto_init() }
func file_nft_proto_init() {
	if File_nft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTransferResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTCollectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTCollectionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTTokenRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTOwnerTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTOwnerTokenRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTTransferRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenURIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenURIRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenAmountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenAmountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_proto_goTypes,
		DependencyIndexes: file_nft_proto_depIdxs,
		MessageInfos:      file_nft_proto_msgTypes,
	}.Build()
	File_nft_proto = out.File
	file_nft_proto_rawDesc = nil
	file_nft_proto_goTypes = nil
	file_nft_proto_depIdxs = nil
}
