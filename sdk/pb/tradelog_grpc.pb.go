// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: tradelog.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeLogServiceClient is the client API for TradeLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeLogServiceClient interface {
	// 获取交易数据
	FindTradeLog(ctx context.Context, in *FindTradeLogReq, opts ...grpc.CallOption) (*FindTradeLogRes, error)
}

type tradeLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeLogServiceClient(cc grpc.ClientConnInterface) TradeLogServiceClient {
	return &tradeLogServiceClient{cc}
}

func (c *tradeLogServiceClient) FindTradeLog(ctx context.Context, in *FindTradeLogReq, opts ...grpc.CallOption) (*FindTradeLogRes, error) {
	out := new(FindTradeLogRes)
	err := c.cc.Invoke(ctx, "/service.TradeLogService/FindTradeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeLogServiceServer is the server API for TradeLogService service.
// All implementations must embed UnimplementedTradeLogServiceServer
// for forward compatibility
type TradeLogServiceServer interface {
	// 获取交易数据
	FindTradeLog(context.Context, *FindTradeLogReq) (*FindTradeLogRes, error)
	mustEmbedUnimplementedTradeLogServiceServer()
}

// UnimplementedTradeLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradeLogServiceServer struct {
}

func (UnimplementedTradeLogServiceServer) FindTradeLog(context.Context, *FindTradeLogReq) (*FindTradeLogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTradeLog not implemented")
}
func (UnimplementedTradeLogServiceServer) mustEmbedUnimplementedTradeLogServiceServer() {}

// UnsafeTradeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeLogServiceServer will
// result in compilation errors.
type UnsafeTradeLogServiceServer interface {
	mustEmbedUnimplementedTradeLogServiceServer()
}

func RegisterTradeLogServiceServer(s grpc.ServiceRegistrar, srv TradeLogServiceServer) {
	s.RegisterService(&TradeLogService_ServiceDesc, srv)
}

func _TradeLogService_FindTradeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTradeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeLogServiceServer).FindTradeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TradeLogService/FindTradeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeLogServiceServer).FindTradeLog(ctx, req.(*FindTradeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeLogService_ServiceDesc is the grpc.ServiceDesc for TradeLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.TradeLogService",
	HandlerType: (*TradeLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTradeLog",
			Handler:    _TradeLogService_FindTradeLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tradelog.proto",
}
