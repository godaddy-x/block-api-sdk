// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: address.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServiceClient interface {
	// 创建地址
	CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...grpc.CallOption) (*CreateAddressRes, error)
	// 导入地址
	ImportAddress(ctx context.Context, in *ImportAddressReq, opts ...grpc.CallOption) (*ImportAddressRes, error)
	// 通过address查询地址
	FindAddressByAddress(ctx context.Context, in *FindAddressByAddressReq, opts ...grpc.CallOption) (*FindAddressByAddressRes, error)
	// 通过accountID查询地址列表
	FindAddressByAccountID(ctx context.Context, in *FindAddressByAccountIDReq, opts ...grpc.CallOption) (*FindAddressByAccountIDRes, error)
	// 校验地址编码
	VerifyAddress(ctx context.Context, in *VerifyAddressReq, opts ...grpc.CallOption) (*VerifyAddressRes, error)
	// 通过地址查询余额/合约
	GetBalanceByAddress(ctx context.Context, in *GetBalanceByAddressReq, opts ...grpc.CallOption) (*GetBalanceByAddressRes, error)
	// 通过地址查询余额/合约列表
	GetAddressBalanceList(ctx context.Context, in *GetAddressBalanceListReq, opts ...grpc.CallOption) (*GetAddressBalanceListRes, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...grpc.CallOption) (*CreateAddressRes, error) {
	out := new(CreateAddressRes)
	err := c.cc.Invoke(ctx, "/service.AddressService/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ImportAddress(ctx context.Context, in *ImportAddressReq, opts ...grpc.CallOption) (*ImportAddressRes, error) {
	out := new(ImportAddressRes)
	err := c.cc.Invoke(ctx, "/service.AddressService/ImportAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) FindAddressByAddress(ctx context.Context, in *FindAddressByAddressReq, opts ...grpc.CallOption) (*FindAddressByAddressRes, error) {
	out := new(FindAddressByAddressRes)
	err := c.cc.Invoke(ctx, "/service.AddressService/FindAddressByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) FindAddressByAccountID(ctx context.Context, in *FindAddressByAccountIDReq, opts ...grpc.CallOption) (*FindAddressByAccountIDRes, error) {
	out := new(FindAddressByAccountIDRes)
	err := c.cc.Invoke(ctx, "/service.AddressService/FindAddressByAccountID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) VerifyAddress(ctx context.Context, in *VerifyAddressReq, opts ...grpc.CallOption) (*VerifyAddressRes, error) {
	out := new(VerifyAddressRes)
	err := c.cc.Invoke(ctx, "/service.AddressService/VerifyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetBalanceByAddress(ctx context.Context, in *GetBalanceByAddressReq, opts ...grpc.CallOption) (*GetBalanceByAddressRes, error) {
	out := new(GetBalanceByAddressRes)
	err := c.cc.Invoke(ctx, "/service.AddressService/GetBalanceByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddressBalanceList(ctx context.Context, in *GetAddressBalanceListReq, opts ...grpc.CallOption) (*GetAddressBalanceListRes, error) {
	out := new(GetAddressBalanceListRes)
	err := c.cc.Invoke(ctx, "/service.AddressService/GetAddressBalanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility
type AddressServiceServer interface {
	// 创建地址
	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressRes, error)
	// 导入地址
	ImportAddress(context.Context, *ImportAddressReq) (*ImportAddressRes, error)
	// 通过address查询地址
	FindAddressByAddress(context.Context, *FindAddressByAddressReq) (*FindAddressByAddressRes, error)
	// 通过accountID查询地址列表
	FindAddressByAccountID(context.Context, *FindAddressByAccountIDReq) (*FindAddressByAccountIDRes, error)
	// 校验地址编码
	VerifyAddress(context.Context, *VerifyAddressReq) (*VerifyAddressRes, error)
	// 通过地址查询余额/合约
	GetBalanceByAddress(context.Context, *GetBalanceByAddressReq) (*GetBalanceByAddressRes, error)
	// 通过地址查询余额/合约列表
	GetAddressBalanceList(context.Context, *GetAddressBalanceListReq) (*GetAddressBalanceListRes, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServiceServer struct {
}

func (UnimplementedAddressServiceServer) CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedAddressServiceServer) ImportAddress(context.Context, *ImportAddressReq) (*ImportAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAddress not implemented")
}
func (UnimplementedAddressServiceServer) FindAddressByAddress(context.Context, *FindAddressByAddressReq) (*FindAddressByAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAddressByAddress not implemented")
}
func (UnimplementedAddressServiceServer) FindAddressByAccountID(context.Context, *FindAddressByAccountIDReq) (*FindAddressByAccountIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAddressByAccountID not implemented")
}
func (UnimplementedAddressServiceServer) VerifyAddress(context.Context, *VerifyAddressReq) (*VerifyAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetBalanceByAddress(context.Context, *GetBalanceByAddressReq) (*GetBalanceByAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressBalanceList(context.Context, *GetAddressBalanceListReq) (*GetAddressBalanceListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressBalanceList not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AddressService/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateAddress(ctx, req.(*CreateAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ImportAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ImportAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AddressService/ImportAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ImportAddress(ctx, req.(*ImportAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_FindAddressByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAddressByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).FindAddressByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AddressService/FindAddressByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).FindAddressByAddress(ctx, req.(*FindAddressByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_FindAddressByAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAddressByAccountIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).FindAddressByAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AddressService/FindAddressByAccountID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).FindAddressByAccountID(ctx, req.(*FindAddressByAccountIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_VerifyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).VerifyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AddressService/VerifyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).VerifyAddress(ctx, req.(*VerifyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetBalanceByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetBalanceByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AddressService/GetBalanceByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetBalanceByAddress(ctx, req.(*GetBalanceByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressBalanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressBalanceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressBalanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AddressService/GetAddressBalanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressBalanceList(ctx, req.(*GetAddressBalanceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAddress",
			Handler:    _AddressService_CreateAddress_Handler,
		},
		{
			MethodName: "ImportAddress",
			Handler:    _AddressService_ImportAddress_Handler,
		},
		{
			MethodName: "FindAddressByAddress",
			Handler:    _AddressService_FindAddressByAddress_Handler,
		},
		{
			MethodName: "FindAddressByAccountID",
			Handler:    _AddressService_FindAddressByAccountID_Handler,
		},
		{
			MethodName: "VerifyAddress",
			Handler:    _AddressService_VerifyAddress_Handler,
		},
		{
			MethodName: "GetBalanceByAddress",
			Handler:    _AddressService_GetBalanceByAddress_Handler,
		},
		{
			MethodName: "GetAddressBalanceList",
			Handler:    _AddressService_GetAddressBalanceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address.proto",
}
