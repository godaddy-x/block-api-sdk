// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: symbol.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SymbolServiceClient is the client API for SymbolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SymbolServiceClient interface {
	// SymbolList
	SymbolBlockList(ctx context.Context, in *SymbolBlockListReq, opts ...grpc.CallOption) (*SymbolBlockListRes, error)
	GetBlockStatus(ctx context.Context, in *GetBlockStatusReq, opts ...grpc.CallOption) (*GetBlockStatusRes, error)
}

type symbolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSymbolServiceClient(cc grpc.ClientConnInterface) SymbolServiceClient {
	return &symbolServiceClient{cc}
}

func (c *symbolServiceClient) SymbolBlockList(ctx context.Context, in *SymbolBlockListReq, opts ...grpc.CallOption) (*SymbolBlockListRes, error) {
	out := new(SymbolBlockListRes)
	err := c.cc.Invoke(ctx, "/service.SymbolService/SymbolBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) GetBlockStatus(ctx context.Context, in *GetBlockStatusReq, opts ...grpc.CallOption) (*GetBlockStatusRes, error) {
	out := new(GetBlockStatusRes)
	err := c.cc.Invoke(ctx, "/service.SymbolService/GetBlockStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SymbolServiceServer is the server API for SymbolService service.
// All implementations must embed UnimplementedSymbolServiceServer
// for forward compatibility
type SymbolServiceServer interface {
	// SymbolList
	SymbolBlockList(context.Context, *SymbolBlockListReq) (*SymbolBlockListRes, error)
	GetBlockStatus(context.Context, *GetBlockStatusReq) (*GetBlockStatusRes, error)
	mustEmbedUnimplementedSymbolServiceServer()
}

// UnimplementedSymbolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSymbolServiceServer struct {
}

func (UnimplementedSymbolServiceServer) SymbolBlockList(context.Context, *SymbolBlockListReq) (*SymbolBlockListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolBlockList not implemented")
}
func (UnimplementedSymbolServiceServer) GetBlockStatus(context.Context, *GetBlockStatusReq) (*GetBlockStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockStatus not implemented")
}
func (UnimplementedSymbolServiceServer) mustEmbedUnimplementedSymbolServiceServer() {}

// UnsafeSymbolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SymbolServiceServer will
// result in compilation errors.
type UnsafeSymbolServiceServer interface {
	mustEmbedUnimplementedSymbolServiceServer()
}

func RegisterSymbolServiceServer(s grpc.ServiceRegistrar, srv SymbolServiceServer) {
	s.RegisterService(&SymbolService_ServiceDesc, srv)
}

func _SymbolService_SymbolBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolBlockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).SymbolBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SymbolService/SymbolBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).SymbolBlockList(ctx, req.(*SymbolBlockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_GetBlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).GetBlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SymbolService/GetBlockStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).GetBlockStatus(ctx, req.(*GetBlockStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SymbolService_ServiceDesc is the grpc.ServiceDesc for SymbolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SymbolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.SymbolService",
	HandlerType: (*SymbolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SymbolBlockList",
			Handler:    _SymbolService_SymbolBlockList_Handler,
		},
		{
			MethodName: "GetBlockStatus",
			Handler:    _SymbolService_GetBlockStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "symbol.proto",
}
